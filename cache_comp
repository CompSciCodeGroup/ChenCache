#include<iostream>
#include <stdio.h>
#include <intrin.h>
#include <time.h> 
#include<vector>
#include<stdio.h>
#include<stdlib.h>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>

using namespace std;

//Prototypes

void FIFO();
void Optimal();
void LRU();
void SecondChance(int memory[][2]);
void LFU();
void ClockAlgorithm();
void WSClock();

int array_2d(int num, int memory[][2]);
int nxt_empty(int memory[][2]);
void second_chance(int item, int memory[][2]);

void FileToArray();

//Global Variables

int data_array[10000];
int page_array[10000][2];
int input = 0;
int pf = 0;
const int frames = 4;

int main()
{
	int memory[frames][2];

	FileToArray();

	cout << "Numbers counted: " << input << endl << endl;
	int choice;

	int repeat = 0;
	cout << "How many time you wanna run?" << endl;
	cin >> repeat;

	int count = 0;

	cout << "Pick an algorithm to run." << endl << "1. FIFO" << endl << "2. Optimal" << endl << "3. Least Recenly Used" << endl
		<< "4. Second Chance" << endl << "5. Least Frequently Used" << endl << "6. Clock" << endl << "7. WSClock" << endl;
	do
	{
		cin >> choice;
		cout << endl;

		switch (choice)
		{
		case 1: 
				FIFO();
				break;
		case 2:
				Optimal();
				break;
		case 3:
				LRU();
				break;
		case 4:
			SecondChance(memory);
				break;
		case 5:
				LFU();
				break;
		case 6:
				ClockAlgorithm();
				break;
		case 7:
				WSClock();
				break;
		case 8:
			cout << "NOT VALID" << endl;
			break;
		}

		cout << "\n___________________________________________________" << endl;

		count++;

	} while (count < repeat);

	return 0;
}


//First in, First out.
void FIFO()
{
	cout << "Performing FIFO Replacement" << endl;
	int count = 0;
	int front = 0;
	//set the frame arrays
	int f_arr[3];
	int f_arr2[4];
	int f_counter = 3;
	int f_counter2 = 4;
	pf = 0;

	//set array to stored value
	while (data_array[count] != 0)
	{
		//set the first page_array = to the data_array count
		page_array[count][0] = data_array[count];
		//inc count and input
		count++;
		input++;
	}

	//use a search
	for (int i = 0; i < count; i++)
	{

		int j = 0;
		while (j < f_counter)
		{
			//check to see if array values match the first spot
			if (page_array[i][0] == f_arr[j])
			{
				break;
			}
			else if (page_array[i][0] != f_arr[j])
			{
				j++;
			}
		}

		if (j >= f_counter)
		{
			f_arr[front] = page_array[i][0];
			pf++;
			front++;
			if (front >= f_counter)
			{
				front = 0;
			}
		}
		if (f_arr[0] < 0)
		{
			f_arr[0] = -1;
		}
		if (f_arr[1] < 0)
		{
			f_arr[1] = -1;
		}
		if (f_arr[2] < 0)
		{
			f_arr[2] = -1;
		}
		cout << f_arr[0] << "|" << f_arr[1] << "|" << f_arr[2] << endl;
	}
	cout << "# of Page Faults: " << pf << endl << endl;

	//----------------------------------------------------------------------------------------------------------------------

	pf = 0;
	front = 0;
	for (int i = 0; i < count; i++)
	{
		int j = 0;
		while (j < f_counter2)
		{
			if (page_array[i][0] == f_arr2[j])
			{
				break;
			}
			else if (page_array[i][0] != f_arr2[j])
			{
				j++;
			}
		}
		if (j >= f_counter2)
		{
			f_arr2[front] = page_array[i][0];
			pf++;
			front++;
			if (front >= f_counter2)
			{
				front = 0;
			}
		}
		if (f_arr2[0] < 0)
		{
			f_arr2[0] = -1;
		}
		if (f_arr2[1] < 0)
		{
			f_arr2[1] = -1;
		}
		if (f_arr2[2] < 0)
		{
			f_arr2[2] = -1;
		}
		if (f_arr2[3] < 0)
		{
			f_arr2[3] = -1;
		}
		cout << f_arr2[0] << "|" << f_arr2[1] << "|" << f_arr2[2] << "|" << f_arr2[3] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;
}

void Optimal() 
{
	int count = 0;
	int future = 0;
	int front = 0;
	int f_arr[3];
	int f_arr2[4];
	int f_counter = 3;
	int f_counter2 = 4;
	int max = 0;
	pf = 0;

	while (data_array[count] != 0)
	{
		page_array[count][0] = data_array[count];
		page_array[count][1] = count;
		count++;
	}

	for (int i = 0; i < count; i++)			//Search funtion used to find values
	{
		int j = 0;
		while (j < f_counter)
		{
			if (data_array[i] == f_arr[j])
			{
				break;
			}
			else if (data_array[i] != f_arr[j])
			{
				j++;
			}
		}
		if (j >= f_counter)
		{
			for (int l = 0; l < f_counter; l++)
			{
				for (int k = i; k < count; k++)
				{
					if (f_arr[l] == page_array[k][0])
					{
						if (max < page_array[k][1])
						{
							max = page_array[k][1];
							break;
						}
					}
				}
			}
			for (int k = 0; k < f_counter; k++)
			{
				if (f_arr[0] < 0)
				{
					f_arr[0] = data_array[i];
					break;
				}
				else if (f_arr[1] < 0)
				{
					f_arr[1] = data_array[i];
					break;
				}
				else if (f_arr[2] < 0)
				{
					f_arr[2] = data_array[i];
					break;
				}
				else if (max == 0)
				{
					f_arr[0] = data_array[i];
				}
				else if (f_arr[k] == page_array[max][0])
				{
					f_arr[k] = data_array[i];
					max = 0;
					break;
				}
			}
			pf++;
		}
		if (f_arr[0] < 0)
		{
			f_arr[0] = -1;
		}
		if (f_arr[1] < 0)
		{
			f_arr[1] = -1;
		}
		if (f_arr[2] < 0)
		{
			f_arr[2] = -1;
		}
		cout << f_arr[0] << "|" << f_arr[1] << "|" << f_arr[2] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;

	//---------------------------------------------------------------------------------------------------------
	pf = 0;
	future = 0;
	front = 0;
	for (int i = 0; i < count; i++)			//Search funtion used to find values
	{
		int j = 0;
		while (j < f_counter2)
		{
			if (data_array[i] == f_arr2[j])
			{
				break;
			}
			else if (data_array[i] != f_arr2[j])
			{
				j++;
			}
		}
		if (j >= f_counter2)
		{
			for (int l = 0; l < f_counter2; l++)
			{
				for (int k = i; k < count; k++)
				{
					if (f_arr2[l] == page_array[k][0])
					{
						if (max < page_array[k][1])
						{
							max = page_array[k][1];
							break;
						}
					}
				}
			}
			for (int k = 0; k < f_counter2; k++)
			{
				if (f_arr2[0] < 0)
				{
					f_arr2[0] = data_array[i];
					break;
				}
				else if (f_arr2[1] < 0)
				{
					f_arr2[1] = data_array[i];
					break;
				}
				else if (f_arr2[2] < 0)
				{
					f_arr2[2] = data_array[i];
					break;
				}
				else if (f_arr2[3] < 0)
				{
					f_arr2[3] = data_array[i];
					break;
				}
				else if (max == 0)
				{
					f_arr2[0] = data_array[i];
				}
				else if (f_arr2[k] == page_array[max][0])
				{
					f_arr2[k] = data_array[i];
					max = 0;
					break;
				}
			}
			pf++;
		}
		if (f_arr2[0] < 0)
		{
			f_arr2[0] = -1;
		}
		if (f_arr2[1] < 0)
		{
			f_arr2[1] = -1;
		}
		if (f_arr2[2] < 0)
		{
			f_arr2[2] = -1;
		}
		if (f_arr2[3] < 0)
		{
			f_arr2[3] = -1;
		}
		cout << f_arr2[0] << "|" << f_arr2[1] << "|" << f_arr2[2] << "|" << f_arr2[3] <<  endl;
	}
	cout << "# of Page Faults: " << pf << endl;
}

void LRU()
{
	int count = 0;
	int min = 12;
	int f_arr[3][2];
	int f_arr2[4][2];
	int f_counter = 3;
	int f_counter2 = 4;
	pf = 0;

	while (data_array[count] != 0)
	{
		page_array[count][0] = data_array[count];
		page_array[count][1] = count;
		count++;
	}

	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter)
		{
			if (data_array[i] == f_arr[j][0])
			{
				f_arr[j][1] = page_array[i][1];
				break;
			}
			else if (data_array[i] != f_arr[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter)
		{
			for (int k = 0; k <= f_counter; k++)
			{
				if (f_arr[0][0] < 0)
				{
					f_arr[0][0] = page_array[i][0];
					f_arr[0][1] = page_array[i][1];
					break;
				}
				else if (f_arr[1][0] < 0)
				{
					f_arr[1][0] = page_array[i][0];
					f_arr[1][1] = page_array[i][1];
					break;
				}
				else if (f_arr[2][0] < 0)
				{
					f_arr[2][0] = page_array[i][0];
					f_arr[2][1] = page_array[i][1];
					break;
				}
				else
				{
					for (int l = 0; l < f_counter; l++)
					{
						if (f_arr[l][1] <= min)
						{
							min = f_arr[l][1];
						}
					}
					for (int k = 0; k < f_counter; k++)
					{
						if (f_arr[k][1] == min)
						{
							f_arr[k][0] = page_array[i][0];
							f_arr[k][1] = page_array[i][1];
							break;
						}
					}
				}
			}
			pf++;
		}
		if (f_arr[0][0] < 0)
		{
			f_arr[0][0] = -1;
		}
		if (f_arr[1][0] < 0)
		{
			f_arr[1][0] = -1;
		}
		if (f_arr[2][0] < 0)
		{
			f_arr[2][0] = -1;
		}
		cout << f_arr[0][0] << "|" << f_arr[1][0] << "|" << f_arr[2][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;

	//-----------------------------------------------------------------------------------------------
	pf = 0;
	min = 12;
	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter2)
		{
			if (data_array[i] == f_arr2[j][0])
			{
				f_arr2[j][1] = page_array[i][1];
				break;
			}
			else if (data_array[i] != f_arr2[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter2)
		{
			for (int k = 0; k <= f_counter2; k++)
			{
				if (f_arr2[0][0] < 0)
				{
					f_arr2[0][0] = page_array[i][0];
					f_arr2[0][1] = page_array[i][1];
					break;
				}
				else if (f_arr2[1][0] < 0)
				{
					f_arr2[1][0] = page_array[i][0];
					f_arr2[1][1] = page_array[i][1];
					break;
				}
				else if (f_arr2[2][0] < 0)
				{
					f_arr2[2][0] = page_array[i][0];
					f_arr2[2][1] = page_array[i][1];
					break;
				}
				else if (f_arr2[3][0] < 0)
				{
					f_arr2[3][0] = page_array[i][0];
					f_arr2[3][0] = page_array[i][1];
				}
				else
				{
					for (int l = 0; l < f_counter2; l++)
					{
						if (f_arr2[l][1] <= min)
						{
							min = f_arr2[l][1];
						}
					}
					for (int k = 0; k < f_counter2; k++)
					{
						if (f_arr2[k][1] == min)
						{
							f_arr2[k][0] = page_array[i][0];
							f_arr2[k][1] = page_array[i][1];
							break;
						}
					}
				}
			}
			pf++;
		}
		if (f_arr2[0][0] < 0)
		{
			f_arr2[0][0] = -1;
		}
		if (f_arr2[1][0] < 0)
		{
			f_arr2[1][0] = -1;
		}
		if (f_arr2[2][0] < 0)
		{
			f_arr2[2][0] = -1;
		}
		if (f_arr2[3][0] < 0)
		{
			f_arr2[3][0] = -1;
		}
		cout << f_arr2[0][0] << "|" << f_arr2[1][0] << "|" << f_arr2[2][0] << "|" << f_arr2[3][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;
}

void SecondChance(int memory[][2])
{
	for (int i = 0; i < input; i++)
	{
		second_chance(data_array[i], memory);

		for (int j = 0; j < frames; j++)
		{
			if (memory[j][0] < 0)
			{
				cout << "0|";
			}
			else
			{
				cout << memory[j][0] << "|";
			}
		}

		cout << endl;
	}

	cout << pf << endl;

	return;
}

void LFU()
{
	int count = 0;
	int min = 12;
	int f_arr[3][2];
	int f_arr2[4][2];
	int f_counter = 3;
	int f_counter2 = 4;
	int location = 0;
	pf = 0;

	//Sets the first part of page array to equal the stored value array
	while (data_array[count] != 0)
	{
		page_array[count][0] = data_array[count];
		page_array[count][1] = count;
		count++;
	}
	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter)
		{
			if (data_array[i] == f_arr[j][0])
			{
				f_arr[j][1]++;
				break;
			}
			else if (data_array[i] != f_arr[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter)
		{
			for (int k = 0; k <= f_counter; k++)
			{
				if (f_arr[0][0] < 0)
				{
					f_arr[0][0] = page_array[i][0];
					f_arr[0][1] = 1;
					break;
				}
				else if (f_arr[1][0] < 0)
				{
					f_arr[1][0] = page_array[i][0];
					f_arr[1][1] = 1;
					break;
				}
				else if (f_arr[2][0] < 0)
				{
					f_arr[2][0] = page_array[i][0];
					f_arr[2][1] = 1;
					break;
				}
				else
				{
					for (int l = 0; l < f_counter; l++)
					{
						if (f_arr[l][1] <= f_arr[location][1])
						{
							location = l;
						}
					}
					f_arr[location][0] = page_array[i][0];
					f_arr[location][1] = 1;
				}
			}
			pf++;
		}
		if (f_arr[0][0] < 0)
		{
			f_arr[0][0] = -1;
		}
		if (f_arr[1][0] < 0)
		{
			f_arr[1][0] = -1;
		}
		if (f_arr[2][0] < 0)
		{
			f_arr[2][0] = -1;
		}
		cout << f_arr[0][0] << "|" << f_arr[1][0] << "|" << f_arr[2][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;

	//--------------------------------------------------------------------------------------------

	pf = 0;
	location = 0;
	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter2)
		{
			if (data_array[i] == f_arr2[j][0])
			{
				f_arr2[j][1]++;
				break;
			}
			else if (data_array[i] != f_arr2[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter2)
		{
			for (int k = 0; k <= f_counter2; k++)
			{
				if (f_arr2[0][0] < 0)
				{
					f_arr2[0][0] = page_array[i][0];
					f_arr2[0][1] = 1;
					break;
				}
				else if (f_arr2[1][0] < 0)
				{
					f_arr2[1][0] = page_array[i][0];
					f_arr2[1][1] = 1;
					break;
				}
				else if (f_arr2[2][0] < 0)
				{
					f_arr2[2][0] = page_array[i][0];
					f_arr2[2][1] = 1;
					break;
				}
				else if (f_arr2[3][0] < 0)
				{
					f_arr2[3][0] = page_array[i][0];
					f_arr2[3][1] = 1;
					break;
				}
				else
				{
					for (int l = 0; l < f_counter2; l++)
					{
						if (f_arr2[l][1] <= f_arr2[location][1])
						{
							location = l;
						}
					}
					f_arr2[location][0] = page_array[i][0];
					f_arr2[location][1] = 1;
				}
			}
			pf++;
		}
		if (f_arr2[0][0] < 0)
		{
			f_arr2[0][0] = -1;
		}
		if (f_arr2[1][0] < 0)
		{
			f_arr2[1][0] = -1;
		}
		if (f_arr2[2][0] < 0)
		{
			f_arr2[2][0] = -1;
		}
		if (f_arr2[3][0] < 0)
		{
			f_arr2[3][0] = -1;
		}
		cout << f_arr2[0][0] << "|" << f_arr2[1][0] << "|" << f_arr2[2][0] << "|" << f_arr2[3][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;
}

void ClockAlgorithm()
{
	int count = 0;
	int min = 12;
	int f_arr[3][2];
	int f_arr2[4][2];
	int f_counter = 3;
	int f_counter2 = 4;
	int clock = 0;
	pf = 0;

	//Sets the first part of page array to equal the stored value array
	while (data_array[count] != 0)
	{
		page_array[count][0] = data_array[count];
		page_array[count][1] = count;
		count++;
	}
	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter)
		{
			if (data_array[i] == f_arr[j][0])
			{
				f_arr[j][1]++;
				break;
			}
			else if (data_array[i] != f_arr[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter)
		{
			for (int k = 0; k <= f_counter; k++)
			{
				if (f_arr[0][0] < 0)
				{
					f_arr[0][0] = page_array[i][0];
					f_arr[0][1] = 1;
					break;
				}
				else if (f_arr[1][0] < 0)
				{
					f_arr[1][0] = page_array[i][0];
					f_arr[1][1] = 1;
					break;
				}
				else if (f_arr[2][0] < 0)
				{
					f_arr[2][0] = page_array[i][0];
					f_arr[2][1] = 1;
					break;
				}
				else
				{
					for (clock = 1; clock < input; clock++)
					{
						for (int l = 0; l < f_counter; l++)
						{
							if (f_arr[l][1] <= clock)
							{
								f_arr[l][0] = page_array[i][0];
								f_arr[l][1] = 1;
								break;
							}
						}
					}
				}
			}
			pf++;
		}
		if (f_arr[0][0] < 0)
		{
			f_arr[0][0] = -1;
		}
		if (f_arr[1][0] < 0)
		{
			f_arr[1][0] = -1;
		}
		if (f_arr[2][0] < 0)
		{
			f_arr[2][0] = -1;
		}
		cout << f_arr[0][0] << "|" << f_arr[1][0] << "|" << f_arr[2][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;

	//-------------------------------------------------------------------------------------------------

	pf = 0;
	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter2)
		{
			if (data_array[i] == f_arr2[j][0])
			{
				f_arr2[j][1]++;
				break;
			}
			else if (data_array[i] != f_arr2[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter2)
		{
			for (int k = 0; k <= f_counter2; k++)
			{
				if (f_arr2[0][0] < 0)
				{
					f_arr2[0][0] = page_array[i][0];
					f_arr2[0][1] = 1;
					break;
				}
				else if (f_arr2[1][0] < 0)
				{
					f_arr2[1][0] = page_array[i][0];
					f_arr2[1][1] = 1;
					break;
				}
				else if (f_arr2[2][0] < 0)
				{
					f_arr2[2][0] = page_array[i][0];
					f_arr2[2][1] = 1;
					break;
				}
				else if (f_arr2[3][0] < 0)
				{
					f_arr2[3][0] = page_array[i][0];
					f_arr2[3][0] = 1;
				}
				else
				{
					for (clock = 1; clock < input; clock++)
					{
						for (int l = 0; l < f_counter2; l++)
						{
							if (f_arr2[l][1] <= clock)
							{
								f_arr2[l][0] = page_array[i][0];
								f_arr2[l][1] = 1;
								break;
							}
						}
					}
				}
			}
			pf++;
		}
		if (f_arr2[0][0] < 0)
		{
			f_arr2[0][0] = -1;
		}
		if (f_arr2[1][0] < 0)
		{
			f_arr2[1][0] = -1;
		}
		if (f_arr2[2][0] < 0)
		{
			f_arr2[2][0] = -1;
		}
		if (f_arr2[3][0] < 0)
		{
			f_arr2[3][0] = -1;
		}
		cout << f_arr2[0][0] << "|" << f_arr2[1][0] << "|" << f_arr2[2][0] << "|" << f_arr2[3][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;
}

void WSClock()
{
	int count = 0;
	int min = 12;
	int f_arr[3][2];
	int f_arr2[4][2];
	int f_counter = 3;
	int f_counter2 = 4;
	int clock = 0;
	pf = 0;

	//Sets the first part of page array to equal the stored value array
	while (data_array[count] != 0)
	{
		page_array[count][0] = data_array[count];
		page_array[count][1] = count;
		count++;
	}
	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter)
		{
			if (data_array[i] == f_arr[j][0])
			{
				f_arr[j][1]++;
				break;
			}
			else if (data_array[i] != f_arr[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter)
		{
			for (int k = 0; k <= f_counter; k++)
			{
				if (f_arr[0][0] < 0)
				{
					f_arr[0][0] = page_array[i][0];
					f_arr[0][1] = 1;
					break;
				}
				else if (f_arr[1][0] < 0)
				{
					f_arr[1][0] = page_array[i][0];
					f_arr[1][1] = 1;
					break;
				}
				else if (f_arr[2][0] < 0)
				{
					f_arr[2][0] = page_array[i][0];
					f_arr[2][1] = 1;
					break;
				}
				else
				{
					for (clock = 1; clock < input; clock++)
					{
						for (int l = 0; l < f_counter; l++)
						{
							if (f_arr[l][1] <= clock)
							{
								f_arr[l][0] = page_array[i][0];
								f_arr[l][1] = 1;
								break;
							}
						}
					}
				}
			}
			pf++;
		}
		if (f_arr[0][0] < 0)
		{
			f_arr[0][0] = -1;
		}
		if (f_arr[1][0] < 0)
		{
			f_arr[1][0] = -1;
		}
		if (f_arr[2][0] < 0)
		{
			f_arr[2][0] = -1;
		}
		cout << f_arr[0][0] << "|" << f_arr[1][0] << "|" << f_arr[2][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;

	//-------------------------------------------------------------------------------------------------

	pf = 0;
	for (int i = 0; i < count; i++)		//Search function used to find values
	{
		int j = 0;
		while (j < f_counter2)
		{
			if (data_array[i] == f_arr2[j][0])
			{
				f_arr2[j][1]++;
				break;
			}
			else if (data_array[i] != f_arr2[j][0])
			{
				j++;
			}
		}
		if (j >= f_counter2)
		{
			for (int k = 0; k <= f_counter2; k++)
			{
				if (f_arr2[0][0] < 0)
				{
					f_arr2[0][0] = page_array[i][0];
					f_arr2[0][1] = 1;
					break;
				}
				else if (f_arr2[1][0] < 0)
				{
					f_arr2[1][0] = page_array[i][0];
					f_arr2[1][1] = 1;
					break;
				}
				else if (f_arr2[2][0] < 0)
				{
					f_arr2[2][0] = page_array[i][0];
					f_arr2[2][1] = 1;
					break;
				}
				else if (f_arr2[3][0] < 0)
				{
					f_arr2[3][0] = page_array[i][0];
					f_arr2[3][0] = 1;
				}
				else
				{
					for (clock = 1; clock < input; clock++)
					{
						for (int l = 0; l < f_counter2; l++)
						{
							if (f_arr2[l][1] <= clock)
							{
								f_arr2[l][0] = page_array[i][0];
								f_arr2[l][1] = 1;
								break;
							}
						}
					}
				}
			}
			pf++;
		}
		if (f_arr2[0][0] < 0)
		{
			f_arr2[0][0] = -1;
		}
		if (f_arr2[1][0] < 0)
		{
			f_arr2[1][0] = -1;
		}
		if (f_arr2[2][0] < 0)
		{
			f_arr2[2][0] = -1;
		}
		if (f_arr2[3][0] < 0)
		{
			f_arr2[3][0] = -1;
		}
		cout << f_arr2[0][0] << "|" << f_arr2[1][0] << "|" << f_arr2[2][0] << "|" << f_arr2[3][0] << endl;
	}
	cout << "# of Page Faults: " << pf << endl;
}

void FileToArray()
{
	//check for file
	int insert = 0;
	int idx = 0;


	fstream in_file("ShortCodeSeries.txt", ios::in);
	if (!in_file)
	{
		cout << "Cannot open file.\n";
		exit(-1);
	}

	while (true) {
		//read line
		in_file >> idx;

		data_array[insert] = idx;
		input++;

		//test for eof
		if (in_file.eof())
			break;

		insert++;
	}
}

//Second Chance Functions
int array_2d(int num, int memory[][2])
{
	for (int i = 0; i < frames; i++)
	{
		if (num == memory[i][0])
		{
			return i;
		}
	}

	return -1;
}

int nxt_empty(int memory[][2])
{
	for (int i = 0; i < frames; i++)
	{
		if (memory[i][0] <= 0)
		{
			return i;
		}
	}

	return -1;
}

void second_chance(int item, int memory[][2])
{
	int location = 0;
	int i = 0;
	bool found = false;

	if (array_2d(item, memory) != -1)
	{
		location = array_2d(item, memory);
		memory[location][1] = 1;
	}
	else
	{
		pf++;
		if (nxt_empty(memory) != -1)
		{
			location = nxt_empty(memory);
			memory[location][0] = item;
			memory[location][1] = 1;
		}
		else
		{
			while (found == false)
			{
				i = 0;
				for (i = 0; i < frames; i++)
				{
					if (memory[i][1] == 0 && found == false)
					{
						memory[i][0] = item;
						memory[i][1] = 1;
						found = true;
					}
					else if (found == false)
					{
						memory[i][1]--;
					}
				}
			}
		}
	}
}
